torch.Size([64]) sigma_list
tensor([0.3389, 0.3118, 0.3746, 0.3155, 0.1213, 0.4291, 0.4262, 0.3246, 0.4751,
        0.2733, 0.2042, 0.2523, 0.4297, 0.4911, 0.2945, 0.3975, 0.2422, 0.1060,
        0.2413, 0.2603, 0.4446, 0.2426, 0.0946, 0.0761, 0.2311, 0.3284, 0.0579,
        0.0170, 0.3537, 0.3611, 0.2518, 0.2943, 0.2162, 0.1979, 0.1955, 0.4245,
        0.4373, 0.2869, 0.0608, 0.0482, 0.4548, 0.0456, 0.3691, 0.2223, 0.1361,
        0.0351, 0.2693, 0.3018, 0.3158, 0.0935, 0.0709, 0.0064, 0.2844, 0.0792,
        0.4284, 0.3748, 0.2038, 0.4082, 0.2803, 0.0735, 0.2113, 0.4671, 0.2171,
        0.4883], device='mps:0')
torch.Size([64]) sigma_list
tensor([3.3105e-01, 1.9102e-01, 4.9047e-01, 3.9367e-01, 4.9260e-01, 2.4238e-01,
        2.6459e-01, 3.1646e-01, 2.4449e-01, 3.4660e-01, 3.2031e-01, 8.1908e-02,
        4.5473e-01, 1.6411e-01, 2.7728e-01, 4.6757e-01, 4.5739e-01, 1.4946e-01,
        9.5379e-02, 2.9104e-02, 2.6499e-01, 2.6484e-01, 2.1330e-02, 1.1347e-01,
        2.4280e-01, 9.4209e-02, 4.6451e-02, 3.4613e-01, 9.3326e-02, 1.8223e-01,
        4.1918e-02, 9.9956e-02, 4.5529e-01, 3.8522e-01, 2.9242e-01, 1.9274e-01,
        2.1709e-01, 2.9307e-01, 3.5529e-01, 4.9095e-01, 3.7886e-01, 4.1772e-01,
        3.6695e-01, 3.6362e-01, 4.6452e-01, 3.3088e-04, 2.6493e-01, 1.4347e-01,
        3.2399e-01, 2.3208e-01, 1.5281e-01, 2.5148e-01, 7.3336e-02, 1.2149e-01,
        1.6849e-01, 5.9237e-02, 4.6177e-01, 9.8396e-02, 4.4380e-01, 2.1578e-01,
        2.7394e-02, 4.2008e-01, 3.8886e-01, 3.2808e-01], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.4562, 0.1930, 0.1774, 0.3858, 0.2006, 0.1988, 0.2223, 0.3552, 0.3647,
        0.0938, 0.3326, 0.1666, 0.1012, 0.2647, 0.4979, 0.3722, 0.2140, 0.1938,
        0.0644, 0.1957, 0.2792, 0.4776, 0.4290, 0.3636, 0.4792, 0.0797, 0.3426,
        0.3797, 0.2083, 0.4276, 0.3164, 0.0561, 0.0661, 0.2726, 0.0197, 0.3287,
        0.2883, 0.1333, 0.4828, 0.0984, 0.1381, 0.0575, 0.0949, 0.0145, 0.2252,
        0.0884, 0.1758, 0.4678, 0.3868, 0.0263, 0.3077, 0.3212, 0.4298, 0.3310,
        0.4381, 0.2866, 0.3942, 0.1118, 0.1285, 0.1891, 0.3803, 0.3747, 0.0811,
        0.2848], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.3422, 0.0766, 0.3149, 0.1723, 0.0508, 0.3705, 0.2801, 0.1627, 0.1048,
        0.1499, 0.1237, 0.1963, 0.4076, 0.2352, 0.0349, 0.0080, 0.3364, 0.3544,
        0.4061, 0.4862, 0.3727, 0.0494, 0.4698, 0.1869, 0.0175, 0.3786, 0.4575,
        0.3492, 0.1135, 0.1144, 0.0946, 0.2552, 0.1841, 0.2692, 0.4670, 0.1050,
        0.1911, 0.3583, 0.4367, 0.1733, 0.3067, 0.0840, 0.0427, 0.4449, 0.2041,
        0.0349, 0.1383, 0.2216, 0.0486, 0.4951, 0.0794, 0.4667, 0.4184, 0.0758,
        0.4880, 0.3343, 0.2365, 0.4038, 0.2406, 0.3326, 0.3429, 0.1950, 0.4116,
        0.4502], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.3599, 0.3982, 0.3893, 0.0632, 0.2125, 0.0592, 0.4150, 0.3540, 0.4699,
        0.0555, 0.3818, 0.3276, 0.4595, 0.1404, 0.3164, 0.0039, 0.4446, 0.4123,
        0.3177, 0.1991, 0.4568, 0.0424, 0.2430, 0.3052, 0.3371, 0.2480, 0.1140,
        0.3417, 0.4094, 0.2970, 0.4307, 0.0655, 0.0095, 0.4832, 0.1361, 0.2628,
        0.1244, 0.4532, 0.0763, 0.0485, 0.3250, 0.1040, 0.0935, 0.2937, 0.1102,
        0.2075, 0.0048, 0.2528, 0.0206, 0.2555, 0.4720, 0.2092, 0.3151, 0.3104,
        0.2464, 0.2984, 0.1805, 0.0832, 0.1133, 0.2054, 0.0015, 0.4184, 0.2572,
        0.4741], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.4978, 0.3772, 0.3262, 0.3141, 0.4090, 0.4247, 0.3631, 0.0310, 0.1165,
        0.3795, 0.1462, 0.3553, 0.4726, 0.3558, 0.3210, 0.3465, 0.1900, 0.1851,
        0.1945, 0.2308, 0.2429, 0.4640, 0.4170, 0.4854, 0.2576, 0.0315, 0.4034,
        0.3348, 0.4227, 0.0184, 0.4563, 0.0616, 0.2471, 0.3873, 0.0399, 0.2902,
        0.4777, 0.2173, 0.2874, 0.3999, 0.3176, 0.4811, 0.0163, 0.2796, 0.3134,
        0.4666, 0.3670, 0.3840, 0.0372, 0.4890, 0.4585, 0.4511, 0.4898, 0.1434,
        0.2586, 0.2495, 0.0254, 0.4008, 0.1272, 0.4292, 0.2546, 0.4652, 0.3707,
        0.4967], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.0728, 0.0321, 0.1529, 0.2244, 0.0431, 0.3609, 0.0360, 0.2227, 0.4789,
        0.1373, 0.1171, 0.4040, 0.0473, 0.4555, 0.4290, 0.1947, 0.2617, 0.0436,
        0.1734, 0.2986, 0.2849, 0.1959, 0.3480, 0.4715, 0.3207, 0.0815, 0.1184,
        0.3508, 0.4224, 0.2987, 0.3279, 0.3190, 0.3285, 0.1162, 0.0471, 0.0051,
        0.2672, 0.0348, 0.1473, 0.4335, 0.3052, 0.2816, 0.0286, 0.2247, 0.0211,
        0.2186, 0.0122, 0.1811, 0.0849, 0.1006, 0.4892, 0.4548, 0.4231, 0.0062,
        0.1526, 0.1214, 0.1502, 0.1148, 0.4255, 0.2472, 0.3745, 0.1682, 0.3202,
        0.2654], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.3263, 0.3618, 0.0568, 0.2134, 0.3122, 0.1106, 0.1755, 0.2820, 0.1086,
        0.0474, 0.1780, 0.3146, 0.3819, 0.2887, 0.3783, 0.2482, 0.3145, 0.0637,
        0.1078, 0.4008, 0.1363, 0.2732, 0.3499, 0.3249, 0.1845, 0.3444, 0.1477,
        0.0528, 0.4652, 0.3117, 0.0633, 0.2951, 0.1735, 0.2635, 0.2232, 0.4248,
        0.3914, 0.0539, 0.1201, 0.4508, 0.0310, 0.3703, 0.2523, 0.4059, 0.3052,
        0.0391, 0.4243, 0.2504, 0.3112, 0.2225, 0.0306, 0.2169, 0.1399, 0.0440,
        0.4381, 0.4209, 0.4512, 0.0673, 0.0012, 0.3038, 0.3021, 0.1758, 0.3398,
        0.4032], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.4591, 0.2446, 0.1337, 0.0780, 0.3171, 0.1710, 0.1244, 0.1494, 0.4708,
        0.1995, 0.0533, 0.1496, 0.4708, 0.4746, 0.0484, 0.4736, 0.3522, 0.0248,
        0.2911, 0.2953, 0.2308, 0.0686, 0.1214, 0.1719, 0.3279, 0.2010, 0.2770,
        0.4316, 0.0371, 0.0205, 0.2010, 0.3013, 0.1695, 0.3767, 0.2263, 0.1425,
        0.2188, 0.1663, 0.2309, 0.4898, 0.2997, 0.4796, 0.4581, 0.4063, 0.3201,
        0.0532, 0.0162, 0.1778, 0.4485, 0.2663, 0.1032, 0.1403, 0.0446, 0.4932,
        0.4264, 0.3865, 0.1118, 0.1795, 0.3256, 0.1238, 0.4032, 0.2957, 0.2390,
        0.4025], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.1679, 0.4345, 0.4002, 0.1203, 0.4605, 0.1108, 0.0332, 0.3532, 0.2261,
        0.2244, 0.4059, 0.4327, 0.1951, 0.3495, 0.2960, 0.2563, 0.3248, 0.4030,
        0.2750, 0.0285, 0.4457, 0.3030, 0.4706, 0.1485, 0.3882, 0.1030, 0.3241,
        0.0546, 0.2414, 0.1394, 0.3618, 0.4752, 0.0537, 0.0490, 0.1636, 0.3657,
        0.1912, 0.0245, 0.2425, 0.4363, 0.1895, 0.0009, 0.4897, 0.1521, 0.4177,
        0.2788, 0.1169, 0.1446, 0.4013, 0.0994, 0.2390, 0.3169, 0.3444, 0.4699,
        0.4980, 0.2493, 0.1099, 0.2504, 0.3976, 0.4161, 0.4221, 0.0176, 0.0824,
        0.0103], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.4671, 0.2669, 0.1722, 0.4099, 0.0714, 0.1671, 0.0544, 0.2540, 0.1649,
        0.4127, 0.4468, 0.1177, 0.2852, 0.4438, 0.1215, 0.2874, 0.3671, 0.1472,
        0.0609, 0.3240, 0.2939, 0.1082, 0.4225, 0.0432, 0.2855, 0.4270, 0.2220,
        0.2826, 0.3048, 0.0421, 0.0661, 0.0698, 0.3884, 0.3042, 0.4112, 0.3380,
        0.0787, 0.3503, 0.1963, 0.1613, 0.1081, 0.4512, 0.0279, 0.2081, 0.4365,
        0.1598, 0.0115, 0.0926, 0.3085, 0.3624, 0.1647, 0.2130, 0.3846, 0.3550,
        0.4450, 0.3941, 0.4839, 0.4915, 0.3555, 0.2860, 0.0634, 0.2106, 0.1890,
        0.1782], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.0335, 0.1541, 0.0688, 0.2811, 0.1683, 0.4168, 0.4010, 0.3331, 0.3944,
        0.4025, 0.3130, 0.4174, 0.2404, 0.0160, 0.3544, 0.3539, 0.2533, 0.4355,
        0.1368, 0.4426, 0.1881, 0.4846, 0.4206, 0.3890, 0.1149, 0.2519, 0.2401,
        0.2661, 0.4928, 0.1990, 0.3806, 0.2817, 0.1874, 0.1625, 0.1777, 0.3830,
        0.1098, 0.4266, 0.1584, 0.0677, 0.3608, 0.3075, 0.1394, 0.0165, 0.2578,
        0.3777, 0.4210, 0.3241, 0.2543, 0.2597, 0.3716, 0.4946, 0.0028, 0.0833,
        0.1890, 0.0582, 0.3279, 0.1135, 0.3926, 0.2198, 0.4983, 0.0984, 0.1522,
        0.2065], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.4087, 0.0487, 0.1696, 0.3100, 0.2025, 0.3556, 0.4751, 0.0543, 0.2027,
        0.0753, 0.3084, 0.4908, 0.0915, 0.0636, 0.2556, 0.0525, 0.0900, 0.3849,
        0.0266, 0.0952, 0.1331, 0.0834, 0.2353, 0.2003, 0.3973, 0.1073, 0.1559,
        0.2105, 0.3199, 0.4462, 0.0392, 0.1119, 0.0625, 0.0641, 0.0044, 0.4101,
        0.3108, 0.1135, 0.4275, 0.1874, 0.1598, 0.4412, 0.2095, 0.3417, 0.0212,
        0.1502, 0.3099, 0.2508, 0.0347, 0.2448, 0.0359, 0.2986, 0.3778, 0.0529,
        0.1592, 0.4827, 0.4634, 0.1887, 0.0866, 0.0302, 0.3298, 0.2313, 0.4081,
        0.4930], device='mps:0')
torch.Size([64]) sigma_list
tensor([3.2123e-01, 2.2325e-01, 1.8796e-01, 9.4939e-02, 1.5846e-01, 3.3333e-01,
        1.6564e-01, 7.0869e-02, 2.2464e-01, 1.8954e-01, 3.8944e-01, 4.3983e-01,
        8.0055e-02, 4.0144e-01, 2.3044e-01, 2.9603e-01, 1.1098e-01, 1.4610e-01,
        4.1853e-01, 1.7663e-01, 6.9309e-02, 1.5772e-01, 1.3996e-01, 2.5484e-01,
        1.7331e-01, 1.0017e-01, 4.6700e-01, 2.3725e-01, 7.2879e-02, 3.1046e-01,
        1.4960e-01, 3.3361e-01, 1.3969e-05, 3.0780e-01, 1.1797e-01, 6.7120e-02,
        3.3316e-01, 1.7822e-01, 9.1752e-02, 2.1890e-02, 4.5158e-01, 4.8015e-01,
        3.3888e-01, 4.9266e-01, 3.1917e-01, 1.9759e-01, 4.1432e-01, 2.3114e-01,
        1.5454e-01, 4.2944e-01, 2.6761e-01, 3.1535e-01, 4.4488e-01, 3.2798e-01,
        1.7237e-01, 4.7632e-01, 5.2665e-02, 6.7198e-02, 4.5167e-02, 2.4737e-01,
        4.6085e-01, 4.7677e-01, 2.1989e-01, 1.8402e-01], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.4073, 0.1651, 0.0510, 0.0420, 0.2312, 0.4748, 0.1533, 0.3728, 0.3950,
        0.2774, 0.1595, 0.3648, 0.1506, 0.0845, 0.4325, 0.0999, 0.2208, 0.0743,
        0.4661, 0.4708, 0.2063, 0.0191, 0.0253, 0.0868, 0.0813, 0.4503, 0.0317,
        0.4155, 0.1522, 0.4016, 0.3159, 0.3313, 0.1896, 0.2676, 0.1366, 0.0575,
        0.1190, 0.1781, 0.0455, 0.0827, 0.3055, 0.4858, 0.4364, 0.0954, 0.0483,
        0.0680, 0.4757, 0.2378, 0.1208, 0.1927, 0.0369, 0.2372, 0.2810, 0.3914,
        0.0983, 0.2629, 0.4776, 0.3872, 0.4962, 0.1406, 0.0570, 0.4418, 0.0804,
        0.0643], device='mps:0')
torch.Size([40]) sigma_list
tensor([0.1596, 0.1311, 0.2163, 0.1124, 0.0909, 0.4793, 0.2247, 0.0278, 0.1982,
        0.3253, 0.2677, 0.4498, 0.0272, 0.2990, 0.4706, 0.1181, 0.1577, 0.4652,
        0.4201, 0.4557, 0.2424, 0.1288, 0.0076, 0.3184, 0.2689, 0.1660, 0.1727,
        0.4943, 0.0162, 0.2733, 0.4057, 0.1966, 0.3504, 0.2145, 0.2698, 0.0745,
        0.4357, 0.4043, 0.3571, 0.0934], device='mps:0')
Traceback (most recent call last):
  File "/Users/mmuhleth/Desktop/diffusion_graph/train_unet.py", line 75, in <module>
    fit(model, optimizer, dataloader, max_epoch=100, device=device)
  File "/Users/mmuhleth/Desktop/diffusion_graph/train_unet.py", line 48, in fit
    score = model(train_adj_b_noisy_matrix, sigma_list)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/mmuhleth/Desktop/diffusion_graph/model/unet.py", line 247, in forward
    x = block1(x, t)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/mmuhleth/Desktop/diffusion_graph/model/unet.py", line 92, in forward
    h = self.net(h)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/container.py", line 219, in forward
    input = module(input)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 458, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 454, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
KeyboardInterrupt
Traceback (most recent call last):
  File "/Users/mmuhleth/Desktop/diffusion_graph/train_unet.py", line 75, in <module>
    fit(model, optimizer, dataloader, max_epoch=100, device=device)
  File "/Users/mmuhleth/Desktop/diffusion_graph/train_unet.py", line 48, in fit
    score = model(train_adj_b_noisy_matrix, sigma_list)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/mmuhleth/Desktop/diffusion_graph/model/unet.py", line 247, in forward
    x = block1(x, t)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/mmuhleth/Desktop/diffusion_graph/model/unet.py", line 92, in forward
    h = self.net(h)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/container.py", line 219, in forward
    input = module(input)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 458, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 454, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
KeyboardInterrupt