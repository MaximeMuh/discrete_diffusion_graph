torch.Size([64]) sigma_list
tensor([0.4145, 0.2414, 0.4904, 0.1206, 0.3958, 0.3793, 0.4565, 0.1203, 0.0315,
        0.4646, 0.4559, 0.0721, 0.3109, 0.2791, 0.4536, 0.2485, 0.0395, 0.2605,
        0.1735, 0.3025, 0.3756, 0.1530, 0.4699, 0.0530, 0.0217, 0.1662, 0.0076,
        0.0763, 0.3709, 0.4067, 0.4474, 0.1774, 0.0225, 0.1529, 0.1311, 0.0069,
        0.2779, 0.4018, 0.3104, 0.3336, 0.0475, 0.4250, 0.4323, 0.2334, 0.2874,
        0.4581, 0.1404, 0.1611, 0.3283, 0.3392, 0.3773, 0.3487, 0.4078, 0.0713,
        0.3900, 0.4707, 0.4924, 0.0679, 0.3328, 0.0622, 0.3684, 0.2549, 0.2507,
        0.0452], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.1906, 0.2611, 0.3926, 0.1135, 0.3168, 0.2858, 0.3755, 0.4485, 0.3924,
        0.0454, 0.4845, 0.3914, 0.1634, 0.0009, 0.2230, 0.2672, 0.0157, 0.1544,
        0.0088, 0.1161, 0.1332, 0.0237, 0.0400, 0.3039, 0.4208, 0.4902, 0.3759,
        0.4128, 0.1588, 0.4726, 0.0294, 0.2480, 0.1372, 0.3266, 0.4809, 0.1119,
        0.2816, 0.2169, 0.3997, 0.4209, 0.4512, 0.4738, 0.4688, 0.3853, 0.3381,
        0.4092, 0.2648, 0.2402, 0.2451, 0.0265, 0.0558, 0.3635, 0.3937, 0.1223,
        0.4765, 0.1989, 0.0281, 0.0302, 0.3721, 0.4754, 0.4974, 0.1375, 0.1879,
        0.4468], device='mps:0')
torch.Size([64]) sigma_list
tensor([3.9074e-01, 9.0263e-02, 1.3826e-01, 3.6942e-01, 9.9993e-02, 3.2129e-02,
        2.3866e-04, 4.7522e-01, 4.1520e-01, 2.7509e-01, 2.6406e-01, 3.4727e-01,
        3.7684e-01, 3.7869e-01, 6.9965e-02, 1.0372e-01, 2.9234e-01, 3.9128e-01,
        4.6724e-01, 1.8005e-01, 2.4779e-01, 1.7282e-01, 4.4992e-01, 4.0825e-01,
        1.9112e-02, 4.1893e-01, 4.2175e-02, 4.5441e-02, 4.3125e-01, 1.4169e-01,
        4.8522e-01, 2.6713e-01, 1.2475e-01, 3.2532e-01, 4.4990e-01, 2.4532e-01,
        3.2883e-01, 8.0123e-02, 1.1773e-01, 3.8891e-01, 4.3052e-01, 4.8951e-01,
        3.5962e-01, 3.5279e-01, 1.2622e-01, 2.6050e-02, 1.1535e-02, 4.5338e-01,
        4.7288e-01, 4.2251e-02, 4.0262e-01, 3.1205e-02, 1.3534e-01, 3.6786e-01,
        2.2166e-01, 9.8911e-02, 4.3823e-01, 4.5613e-02, 3.3930e-02, 1.8521e-01,
        2.5267e-01, 3.2567e-01, 5.2059e-02, 3.4928e-01], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.0767, 0.2528, 0.1627, 0.4325, 0.3034, 0.2242, 0.0209, 0.1324, 0.0098,
        0.2370, 0.3176, 0.3006, 0.0967, 0.4986, 0.2360, 0.4256, 0.4673, 0.2074,
        0.1813, 0.2604, 0.3975, 0.0100, 0.2509, 0.3367, 0.3440, 0.0569, 0.4973,
        0.3542, 0.4120, 0.1616, 0.1011, 0.0837, 0.1913, 0.3380, 0.3875, 0.1837,
        0.3520, 0.2526, 0.2167, 0.2542, 0.2826, 0.4375, 0.4622, 0.4703, 0.4468,
        0.3678, 0.0736, 0.0900, 0.4136, 0.3403, 0.4137, 0.2186, 0.3665, 0.4251,
        0.1152, 0.4415, 0.0347, 0.3377, 0.2644, 0.4558, 0.3066, 0.0833, 0.0399,
        0.4085], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.4185, 0.4950, 0.3460, 0.1633, 0.0675, 0.0565, 0.1229, 0.2484, 0.4249,
        0.4761, 0.0054, 0.0128, 0.0105, 0.1675, 0.1133, 0.2150, 0.4780, 0.3077,
        0.2523, 0.4650, 0.1621, 0.2669, 0.3279, 0.1947, 0.4221, 0.4971, 0.3480,
        0.3208, 0.3616, 0.3278, 0.2403, 0.3759, 0.2821, 0.4280, 0.3022, 0.3494,
        0.0203, 0.4072, 0.3785, 0.1756, 0.0812, 0.0870, 0.3444, 0.3685, 0.1431,
        0.4712, 0.2277, 0.1415, 0.4561, 0.3706, 0.3746, 0.1616, 0.0560, 0.0074,
        0.1579, 0.4427, 0.0053, 0.2007, 0.4680, 0.0447, 0.2556, 0.2490, 0.0574,
        0.0337], device='mps:0')
torch.Size([64]) sigma_list
Traceback (most recent call last):
  File "/Users/mmuhleth/Desktop/diffusion_graph/train_unet.py", line 75, in <module>
    fit(model, optimizer, dataloader, max_epoch=100, device=device)
  File "/Users/mmuhleth/Desktop/diffusion_graph/train_unet.py", line 53, in fit
    optimizer.step()
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/lr_scheduler.py", line 130, in wrapper
    return func.__get__(opt, opt.__class__)(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/optimizer.py", line 484, in wrapper
    out = func(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/optimizer.py", line 89, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/adam.py", line 226, in step
    adam(
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/optimizer.py", line 161, in maybe_fallback
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/adam.py", line 766, in adam
    func(
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/adam.py", line 365, in _single_tensor_adam
    step_t += 1
KeyboardInterrupt
Traceback (most recent call last):
  File "/Users/mmuhleth/Desktop/diffusion_graph/train_unet.py", line 75, in <module>
    fit(model, optimizer, dataloader, max_epoch=100, device=device)
  File "/Users/mmuhleth/Desktop/diffusion_graph/train_unet.py", line 53, in fit
    optimizer.step()
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/lr_scheduler.py", line 130, in wrapper
    return func.__get__(opt, opt.__class__)(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/optimizer.py", line 484, in wrapper
    out = func(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/optimizer.py", line 89, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/adam.py", line 226, in step
    adam(
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/optimizer.py", line 161, in maybe_fallback
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/adam.py", line 766, in adam
    func(
  File "/opt/anaconda3/envs/digress/lib/python3.9/site-packages/torch/optim/adam.py", line 365, in _single_tensor_adam
    step_t += 1
KeyboardInterrupt
tensor([0.4246, 0.2084, 0.3342, 0.0583, 0.0974, 0.4522, 0.2045, 0.1288, 0.0905,
        0.0262, 0.3648, 0.3765, 0.3092, 0.1086, 0.3290, 0.4082, 0.0787, 0.0258,
        0.4259, 0.2226, 0.0513, 0.1009, 0.2177, 0.1954, 0.0281, 0.2077, 0.2861,
        0.1806, 0.3075, 0.3472, 0.1301, 0.3262, 0.4570, 0.3242, 0.0768, 0.3584,
        0.1665, 0.2667, 0.1541, 0.1049, 0.1641, 0.1866, 0.2688, 0.2889, 0.1291,
        0.2261, 0.2427, 0.4067, 0.4534, 0.3902, 0.0485, 0.4718, 0.0024, 0.4897,
        0.0935, 0.0795, 0.2160, 0.1671, 0.2980, 0.0547, 0.3394, 0.3726, 0.3819,
        0.0396], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.4460, 0.0601, 0.4789, 0.3911, 0.4308, 0.1318, 0.2012, 0.0197, 0.4633,
        0.3979, 0.1655, 0.4926, 0.0259, 0.1387, 0.4103, 0.2866, 0.2421, 0.4841,
        0.4754, 0.1642, 0.2307, 0.4546, 0.4879, 0.1971, 0.4962, 0.3819, 0.2545,
        0.3085, 0.1437, 0.4186, 0.1250, 0.1535, 0.1621, 0.2845, 0.0507, 0.3908,
        0.2538, 0.2503, 0.4108, 0.4987, 0.1978, 0.4451, 0.3235, 0.1604, 0.1401,
        0.2542, 0.2150, 0.3728, 0.4094, 0.0436, 0.4220, 0.2515, 0.3113, 0.0898,
        0.0456, 0.4158, 0.3533, 0.3583, 0.1469, 0.1517, 0.0298, 0.3363, 0.3897,
        0.0242], device='mps:0')
torch.Size([64]) sigma_list
tensor([0.4703, 0.3836, 0.2035, 0.1238, 0.3208, 0.3129, 0.3246, 0.4967, 0.4429,
        0.2080, 0.0103, 0.1143, 0.1091, 0.0801, 0.0548, 0.3720, 0.3562, 0.0921,
        0.2977, 0.3051, 0.0239, 0.4714, 0.3386, 0.1768, 0.2418, 0.0117, 0.0560,
        0.2822, 0.0089, 0.4208, 0.3288, 0.1955, 0.1800, 0.4293, 0.0040, 0.2135,
        0.0479, 0.2810, 0.0534, 0.4329, 0.1763, 0.4033, 0.2283, 0.3515, 0.2877,
        0.4067, 0.1460, 0.1139, 0.3964, 0.4032, 0.3566, 0.1892, 0.3464, 0.0143,
        0.0576, 0.2841, 0.0070, 0.3327, 0.4080, 0.0263, 0.4444, 0.4362, 0.4966,
        0.1152], device='mps:0')